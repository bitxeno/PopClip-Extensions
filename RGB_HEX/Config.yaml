name:
  en: 'Color Convertion'
  zh-Hans: '颜色转换'
  zh-Hant: '顏色轉换'
  ja: 'カラー変換'
version: 1
identifier: xyz.phpz.popclip.extension.rgbhex
icon: icon.png
description: RGB to Hex or Hex to RGB
requirements: [text, paste]
options:
  - identifier: opt_hex_with_hash
    label:
      en: 'Hex With #'
      zh-Hans: 'Hex 带 #'
      zh-Hant: 'Hex 帶 #'
      ja: '# 付きの Hex'
    type: boolean
    default value: true
  - identifier: opt_hex_uppercase
    label:
      en: 'Hex to Uppercase'
      zh-Hans: 'Hex 转大写'
      zh-Hant: 'Hex 轉大寫'
      ja: 'Hex を大文字にする'
    type: boolean
    default value: true
actions:
  - title: 'RGB to Hex'
    icon: square filled Hex
    regex: ^\s*?\(?\s*?(000|0?\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\s*?,\s*?(000|0?\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\s*?,\s*?(000|0?\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\s*?\)?\s*$
    javascript: |
      const opt_hash = popclip.options['opt_hex_with_hash'];
      const opt_uppercase = popclip.options['opt_hex_uppercase'];
      const rgb = popclip.input.text.replace(/[\(\)]/, '').split(',');
      let hex = opt_hash ? '#' : '';
      for (let i = 0; i < rgb.length; i++) {
        let hexDigit = parseInt(rgb[i]).toString(16);
        if (hexDigit.length == 1) {
          hexDigit = '0' + hexDigit;
        }
        hex += opt_uppercase ? hexDigit.toUpperCase() : hexDigit;
      }
      popclip.showText(`${hex} copied!`);
      return hex;
    after: paste-result
  - title: 'Hex to RGB'
    icon: square filled RGB
    regex: ^#?([0-9a-fA-F]{6})$
    javascript: |
      const hex = popclip.input.text.replace('#', '');
      let rgb = [];
      for (let i = 0; i < 3; i++) {
        rgb.push(parseInt(hex.substring(i * 2, i * 2 + 2), 16));
      }
      const rgbStr = rgb.join(',');
      popclip.showText(`${rgbStr} copied!`);
      return rgbStr;
    after: paste-result
